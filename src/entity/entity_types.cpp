/*
 * Do not edit this file directly! It is generated from
 * `tools/entity_types.cpp` by the build system at compile time.
 */
#include "entity_types.h"
#include "entity.h"

#include <cstring>
#include <stddef.h>
#include "../game.h"

i32 format(char *buffer, u32 size, FormatHint args, EntityType type) {
    switch (type) {
        case EntityType::BASEENTITY: return snprintf(buffer, size, "BaseEntity");
        case EntityType::ENTITY: return snprintf(buffer, size, "Entity");
        case EntityType::LIGHT: return snprintf(buffer, size, "Light");
        case EntityType::PLAYER: return snprintf(buffer, size, "Player");
        case EntityType::SOUNDENTITY: return snprintf(buffer, size, "SoundEntity");
        default: UNREACHABLE("Unknown entity type");
    }
    return 0;
}

Field gen_BaseEntity[] = {
    { typeid(bool), "remove", sizeof(bool), (int)offsetof(BaseEntity, remove) },
    { typeid(EntityType), "type", sizeof(EntityType), (int)offsetof(BaseEntity, type) }
};
Field gen_Entity[] = {
    { typeid(bool), "remove", sizeof(bool), (int)offsetof(Entity, remove) },
    { typeid(EntityType), "type", sizeof(EntityType), (int)offsetof(Entity, type) },
    { typeid(Vec3), "position", sizeof(Vec3), (int)offsetof(Entity, position) },
    { typeid(Vec3), "scale", sizeof(Vec3), (int)offsetof(Entity, scale) },
    { typeid(Quat), "rotation", sizeof(Quat), (int)offsetof(Entity, rotation) }
};
Field gen_Light[] = {
    { typeid(bool), "remove", sizeof(bool), (int)offsetof(Light, remove) },
    { typeid(EntityType), "type", sizeof(EntityType), (int)offsetof(Light, type) },
    { typeid(i32), "light_id", sizeof(i32), (int)offsetof(Light, light_id) },
    { typeid(Vec3), "position", sizeof(Vec3), (int)offsetof(Light, position) },
    { typeid(Vec3), "color", sizeof(Vec3), (int)offsetof(Light, color) }
};
Field gen_Player[] = {
    { typeid(bool), "remove", sizeof(bool), (int)offsetof(Player, remove) },
    { typeid(EntityType), "type", sizeof(EntityType), (int)offsetof(Player, type) },
    { typeid(Vec3), "position", sizeof(Vec3), (int)offsetof(Player, position) },
    { typeid(Vec3), "scale", sizeof(Vec3), (int)offsetof(Player, scale) },
    { typeid(Quat), "rotation", sizeof(Quat), (int)offsetof(Player, rotation) },
    { typeid(Vec3), "velocity", sizeof(Vec3), (int)offsetof(Player, velocity) }
};
Field gen_SoundEntity[] = {
    { typeid(bool), "remove", sizeof(bool), (int)offsetof(SoundEntity, remove) },
    { typeid(EntityType), "type", sizeof(EntityType), (int)offsetof(SoundEntity, type) },
    { typeid(AssetID), "asset_id", sizeof(AssetID), (int)offsetof(SoundEntity, asset_id) },
    { typeid(Audio::SoundSourceSettings), "sound_source_settings", sizeof(Audio::SoundSourceSettings), (int)offsetof(SoundEntity, sound_source_settings) },
    { typeid(AudioID), "audio_id", sizeof(AudioID), (int)offsetof(SoundEntity, audio_id) }
};

FieldList get_fields_for(EntityType type) {
    switch (type) {
        case EntityType::BASEENTITY: return { LEN(gen_BaseEntity), gen_BaseEntity };
        case EntityType::ENTITY: return { LEN(gen_Entity), gen_Entity };
        case EntityType::LIGHT: return { LEN(gen_Light), gen_Light };
        case EntityType::PLAYER: return { LEN(gen_Player), gen_Player };
        case EntityType::SOUNDENTITY: return { LEN(gen_SoundEntity), gen_SoundEntity };
        default:
            UNREACHABLE("Unknown entity type");
            return {};
    }
}

/*
 * Included from `tools/entity_types_type_of.cpp`
 */

EntityType type_of(BaseEntity *e) {
    return EntityType::BASEENTITY;
}

EntityType type_of(Entity *e) {
    return EntityType::ENTITY;
}

EntityType type_of(Light *e) {
    return EntityType::LIGHT;
}

EntityType type_of(Player *e) {
    return EntityType::PLAYER;
}

EntityType type_of(SoundEntity *e) {
    return EntityType::SOUNDENTITY;
}


/*
 * End of `tools/entity_types_type_of.cpp`
 */

/*
 * Included from `tools/entity_types_event_callback.cpp`
 */

void EventCreateEntity::callback() {
    switch (type) {
        case EntityType::BASEENTITY: {
            BaseEntity entity;
            std::memcpy(&entity, BASEENTITY, sizeof(BaseEntity));
            GAMESTATE()->entity_system.add(entity);
            break;
        }
        case EntityType::ENTITY: {
            Entity entity;
            std::memcpy(&entity, ENTITY, sizeof(Entity));
            GAMESTATE()->entity_system.add(entity);
            break;
        }
        case EntityType::LIGHT: {
            Light entity;
            std::memcpy(&entity, LIGHT, sizeof(Light));
            GAMESTATE()->entity_system.add(entity);
            break;
        }
        case EntityType::PLAYER: {
            Player entity;
            std::memcpy(&entity, PLAYER, sizeof(Player));
            GAMESTATE()->entity_system.add(entity);
            break;
        }
        case EntityType::SOUNDENTITY: {
            SoundEntity entity;
            std::memcpy(&entity, SOUNDENTITY, sizeof(SoundEntity));
            GAMESTATE()->entity_system.add(entity);
            break;
        }

        default:
            UNREACHABLE("Unknown entity type");
            break;
    }
}

/*
 * End of `tools/entity_types_event_callback.cpp`
 */
